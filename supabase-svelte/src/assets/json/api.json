{
    "void" : {
        "description" : "Javascript's void operator.",
        "link" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void"
    }, 
    "boolean" : {
        "description" : "Javascript's boolean object.",
        "link" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"
    }, 
    "number" : {
        "description" : "Javascript's number object.",
        "link" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"
    }, 
    "console" : {
        "description" : "Used for printing to the dev console.",
        "link" : "https://developer.mozilla.org/en-US/docs/Web/API/console"
    }, 
    "Math" : {
        "description" : "Provides basic math functions.",
        "link" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math"
    }, 
    "Vector2D" : {
        "description": "A 2D vector utility class.",
        "link" : "https://github.com/pickles976/ai-arena/blob/main/src/physics.ts#L6",
        "fields" : 
        {
            "x" : {
                "description" : "x value of the vector.",
                "type" : "number",
                "usage" : "let v = new Vector2D(0,1); \n console.log(v.x) \n",
                "output" : "0.0"
            },
            "y" : {
                "description" : "y value of the vector.",
                "type" : "number",
                "usage" : "let v = new Vector2D(0,1); \n console.log(v.y) \n",
                "output" : "1.0"
            },
            "magnitude" : {
                "description" : "Magnitude of the vector.",
                "type" : "number",
                "usage" : "let v = new Vector2D(3,4); \n console.log(v.magnitude) \n",
                "output" : "5.0"
            }
        },
        "methods" : 
        {
            "new" : 
                {
                    "description" : "Creates a new Vector2D",
                    "arguments" : {
                        "x" : "number",
                        "y" : "number"
                    },
                    "returnType" : "Vector2D",
                    "usage" : "let v = new Vector2D(0.0, 1.0)",
                    "output" : "Vector2D(0,0)"
                }, 
            "add" : 
            {
                "description" : "Adds two vectors. Returns a new vector.",
                "arguments" : {
                    "newVector" : "Vector2D"
                },
                "returnType" : "Vector2D",
                "usage" : "let v1 = new Vector2D(0.0, 1.0) \n let v2 = new Vector2D(1.0, 0.0) \n let newVector = v1.add(v2)",
                "output" : "Vector2D(1.0,1.0)"
            }, 
            "subtract" : 
            {
                "description" : "Subtracts two vectors. Returns a new vector.",
                "arguments" : {
                    "newVector" : "Vector2D"
                },
                "returnType" : "Vector2D",
                "usage" : "let v1 = new Vector2D(0.0, 1.0) \n let v2 = new Vector2D(0.0, 1.0) \n let newVector = v1.subtract(v2)",
                "output" : "Vector2D(0,0)"
            }, 
            "multiply" : 
            {
                "description" : "Multiply a vector by a scalar. Returns a new vector.",
                "arguments" : {
                    "scalar" : "number"
                },
                "returnType" : "Vector2D",
                "usage" : "let v = new Vector2D(0.0, 1.0) \n let newVector = v.multiply(3.0)",
                "output" : "Vector2D(0,3.0)"
            }, 
            "divide" : 
            {
                "description" : "Divide a vector by a scalar. Returns a new vector.",
                "arguments" : {
                    "scalar" : "number"
                },
                "returnType" : "Vector2D",
                "usage" : "let v = new Vector2D(0.0, 1.0) \n let newVector = v.divide(2.0)",
                "output" : "Vector2D(0,0.5)"
            }, 
            "dot" : 
            {
                "description" : "Dot product of two vectors. Returns a new vector.",
                "arguments" : {
                    "newVector" : "Vector2D"
                },
                "returnType" : "number",
                "usage" : "let v1 = new Vector2D(3.0, 2.0) \n let v2 = new Vector2D(1.0, 5.0) \n let newVector = v1.dot(v2)",
                "output" : "13.0"
            }, 
            "normal" : 
            {
                "description" : "Normalizes a vector. Returns a new vector.",
                "arguments" : {
                },
                "returnType" : "Vector2D",
                "usage" : "let v = new Vector2D(100.0, 0.0) \n let newVector = v.normal()",
                "output" : "Vector2D(1.0,0)"
            }, 
            "copy" : 
            {
                "description" : "Copies a vector. Returns a new vector.",
                "arguments" : {
                },
                "returnType" : "Vector2D",
                "usage" : "let v = new Vector2D(0.0, 1.0) let newVector = v.copy()",
                "output" : "Vector2D(0,1.0)"
            }, 
            "rotate" : 
            {
                "description" : "Rotates a vector counter-clockwise",
                "arguments" : {
                    "degrees" : "number"
                },
                "returnType" : "Vector2D",
                "usage" : "let v = new Vector2D(0.0, 1.0) \n let newVector = v.rotate(90)",
                "output" : "Vector2D(0.0,1.0)"
            }, 
            "random" : 
            {
                "description" : "Generates a normalized Vector2D pointing in a random direction.",
                "arguments" : {
                },
                "returnType" : "Vector2D",
                "usage" : "let v = Vector2D.random()",
                "output" : "Vector2D(?,?)"
            },
            "dist" : 
            {
                "description" : "Return the distance between two vectors.",
                "arguments" : {
                    "v1" : "Vector2D",
                    "v2" : "Vector2D"
                },
                "returnType" : "number",
                "usage" : "let v1 = new Vector2D(0,0) \n let v2 = new Vector2D(3.0, 4.0) \n let d = Vector2D.dist(v1,v2)",
                "output" : "5.0"
            }
        }
    },
    "transform" : {
        "description" : "Holds mass, position, and velocity information about a game object.",
        "link" : "https://github.com/pickles976/ai-arena/blob/main/src/physics.ts#L77",
        "fields" : {
            "position" : {
                "description" : "Position of the object in the world.",
                "type" : "Vector2D",
                "usage" : "// Where object is some Game Object \n let pos = object.transform.position"
            },
            "velocity" : {
                "description" : "Velocity of the object.",
                "type" : "Vector2D",
                "usage" : "// Where object is some Game Object \n let pos = object.transform.velocity"
            },
            "acceleration" : {
                "description" : "Accleration of the object.",
                "type" : "Vector2D",
                "usage" : "// Where object is some Game Object \n let pos = object.transform.acceleration"
            },
            "mass" : {
                "description" : "Mass of the object.",
                "type" : "number",
                "usage" : "// Where object is some Game Object \n let pos = object.transform.mass"
            }
        },
        "methods" : {
        }
    },
    "collider" : {
        "description" : "Everything in AI-Arena has a collider. This collider is a simple circle that is used to determine if two objects are intersecting.",
        "link" : "",
        "fields" : {
            "radius" : {
                "description" : "Radius of an object's collider.",
                "type" : "number",
                "usage" : "// Where object is some Game Object \n let radius = object.collider.radius"
            }
        },
        "methods" : {}
    },
    "resources" : {
        "description" : "Most Game Objects in AI-Arena have resources. Ships, Asteroids, Bases, and Energy Beacons can all contain resources.",
        "link" : "",
        "fields" : {
            "metal" : {
                "description" : "Amount of metal a Game Object contains.",
                "type" : "number",
                "usage" : "// Where object is some Game Object \n let pos = object.resources.metal"
            },
            "water" : {
                "description" : "Amount of metal a Game Object contains.",
                "type" : "number",
                "usage" : "// Where object is some Game Object \n let pos = object.resources.water"
            },
            "energy" : {
                "description" : "Amount of energy a Game Object contains.",
                "type" : "number",
                "usage" : "// Where object is some Game Object \n let pos = object.resources.energy"
            }
        },
        "methods" : {}
    },
    "Base" : {
        "description" : "Your Base is your lifeline in AI-Arena. When your Base health drops to zero, you lose the game. The Base can purchase upgrades and build ships.",
        "link" : "https://github.com/pickles976/ai-arena/blob/main/src/objects.ts#L650",
        "fields" : {
            "uuid" : {
                "description" : "The unique identifier of a base object. Useful when you want to reference it directly.",
                "type" : "string",
                "usage" : "// Where base is a Base \n base.uuid"
            },
            "team" : {
                "description" : "The team affiliation of a base object.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.team"
            },
            "health" : {
                "description" : "The health of a base object. 100 by default.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.health"
            },
            "shipCost" : {
                "description" : "The cost of producing a new ship. Increases with each subsequent purchase. 200 metal by default.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.shipCost"
            },
            "healRate" : {
                "description" : "The rate at which a base can heal friendly ships. 0.60 health/s by default.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.healRate"
            },
            "upgradeHealRateCost" : {
                "description" : "The cost of upgrading a base's ship heal rate. 250 metal by default.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.upgradeHealRateCost"
            },
            "maxEnergy" : {
                "description" : "The max energy of a base object. 250 by default.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.maxEnergy"
            },
            "upgradeMaxEnergyCost" : {
                "description" : "The cost of upgrading the max energy of a base object. 250 metal by default.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.upgradeMaxEnergyCost"
            },
            "refiningRate" : {
                "description" : "The rate at which a base can refine water into energy. 0.60/s by default.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.refiningRate"
            },
            "upgradeRefiningRateCost" : {
                "description" : "The cost of upgrading your refining rate. 250 metal by default.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.upgradeRefiningRateCost"
            },
            "interactRadius" : {
                "description" : "The radius that a base can heal friendly ships within. 50 by default.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.interactRadius"
            },
            "upgradeInteractRadiusCost" : {
                "description" : "The cost of upgrading your interact radius. 250 metal by default.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.upgradeInteractRadiusCost"
            },
            "refiningEfficiency" : {
                "description" : "The ratio of energy to water when refining of a base object. 1:1 by default.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.refiningEfficiency"
            },
            "upgradeRefiningEfficiencyCost" : {
                "description" : "The cost of upgrading refining efficiency.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.upgradeRefiningEfficiencyCost"
            },
            "repairRate" : {
                "description" : "The rate at which a base can repair itself. 0.60/s by default.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.repairRate"
            },
            "upgradeRepairRateCost" : {
                "description" : "The cost of upgrading a base's repair rate. 250 metal by default.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.upgradeRepairRateCost"
            },
            "maxHealth" : {
                "description" : "The maximum health of a base object. 100 health by default.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.maxHealth"
            },
            "upgradeMaxHealthCost" : {
                "description" : "The cost of upgrading the max health of a base. 250 metal by default.",
                "type" : "number",
                "usage" : "// Where base is a Base \n base.upgradeMaxHealthCost"
            }
        },
        "methods" : {
            "spawnShip" : 
            {
                "description" : "Spawns a new ship near the base. \n Spawns the ship with the specified amount of energy, unless the base has less than specified.  \n If respawn is set to true, you will respawn a deceased ship. If respawn is set to false you will purchase a new ship slot.",
                "arguments" : {
                    "energy" : "number",
                    "respawn" : "boolean"
                },
                "returnType" : "void",
                "usage" : "// Purchase a new ship slot \n base.spawnShip(50.0, false) \n // Respawn a deceased ship \n base.spawnShip(50.0, true)"
            }, 
            "upgradeHealRate" : 
            {
                "description" : "Upgrades the heal rate of your base for some metal cost.",
                "returnType" : "void",
                "usage" : "base.upgradeHealRate()"
            }, 
            "upgradeMaxEnergy" : 
            {
                "description" : "Upgrades the max energy of your base for some metal cost.",
                "returnType" : "void",
                "usage" : "base.upgradeMaxEnergy()"
            }, 
            "upgradeRefiningRate" : 
            {
                "description" : "Upgrades the refining rate of your base for some metal cost.",
                "returnType" : "void",
                "usage" : "base.upgradeRefiningRate()"
            }, 
            "upgradeInteractRadius" : 
            {
                "description" : "Upgrades the interact radius of your base for some metal cost.",
                "returnType" : "void",
                "usage" : "base.upgradeInteractRadius()"
            }, 
            "upgradeRefiningEfficiency" : 
            {
                "description" : "Upgrades the refining efficiency of your base for some metal cost.",
                "returnType" : "void",
                "usage" : "base.upgradeRefiningEfficiency()"
            }, 
            "upgradeRepairRate" : 
            {
                "description" : "Upgrades the repair rate of your base for some metal cost.",
                "returnType" : "void",
                "usage" : "base.upgradeRepairRate()"
            }, 
            "upgradeMaxHealth" : 
            {
                "description" : "Upgrades the max health of your base for some metal cost.",
                "returnType" : "void",
                "usage" : "base.upgradeMaxHealth()"
            }
        }
    },
    "Ship" : {
        "description" : "Holds mass, position, and velocity information about a game object.",
        "link" : "https://github.com/pickles976/ai-arena/blob/main/src/physics.ts#L77",
        "fields" : {
            "position" : {
                "description" : "Position of the object in the world.",
                "type" : "Vector2D",
                "usage" : "// Where object is some Game Object \n let pos = object.transform.position"
            }
        },
        "methods" : {
            "spawnShip" : 
            {
                "description" : "Spawns a new ship near the base. \n Spawns the ship with the specified amount of energy, unless the base has less than specified.  \n If respawn is set to true, you will respawn a deceased ship. If respawn is set to false you will purchase a new ship slot.",
                "arguments" : {
                    "energy" : "number",
                    "respawn" : "boolean"
                },
                "returnType" : "void",
                "usage" : "// Purchase a new ship slot \n base.spawnShip(50.0, false) \n // Respawn a deceased ship \n base.spawnShip(50.0, true)"
            }
        }
    },
    "Game" : {
        "description" : "Holds mass, position, and velocity information about a game object.",
        "link" : "https://github.com/pickles976/ai-arena/blob/main/src/physics.ts#L77",
        "fields" : {
            "position" : {
                "description" : "Position of the object in the world.",
                "type" : "Vector2D",
                "usage" : "// Where object is some Game Object \n let pos = object.transform.position"
            }
        },
        "methods" : {
            "spawnShip" : 
            {
                "description" : "Spawns a new ship near the base. \n Spawns the ship with the specified amount of energy, unless the base has less than specified.  \n If respawn is set to true, you will respawn a deceased ship. If respawn is set to false you will purchase a new ship slot.",
                "arguments" : {
                    "energy" : "number",
                    "respawn" : "boolean"
                },
                "returnType" : "void",
                "usage" : "// Purchase a new ship slot \n base.spawnShip(50.0, false) \n // Respawn a deceased ship \n base.spawnShip(50.0, true)"
            }
        }
    },
    "Graphics" : {
        "description" : "Holds mass, position, and velocity information about a game object.",
        "link" : "https://github.com/pickles976/ai-arena/blob/main/src/physics.ts#L77",
        "fields" : {
            "position" : {
                "description" : "Position of the object in the world.",
                "type" : "Vector2D",
                "usage" : "// Where object is some Game Object \n let pos = object.transform.position"
            }
        },
        "methods" : {
            "spawnShip" : 
            {
                "description" : "Spawns a new ship near the base. \n Spawns the ship with the specified amount of energy, unless the base has less than specified.  \n If respawn is set to true, you will respawn a deceased ship. If respawn is set to false you will purchase a new ship slot.",
                "arguments" : {
                    "energy" : "number",
                    "respawn" : "boolean"
                },
                "returnType" : "void",
                "usage" : "// Purchase a new ship slot \n base.spawnShip(50.0, false) \n // Respawn a deceased ship \n base.spawnShip(50.0, true)"
            }
        }
    }
}